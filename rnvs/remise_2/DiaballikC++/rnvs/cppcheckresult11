Piece.h:35:5: style: Class 'Piece' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    Piece (Color color);
    ^
Game.cpp:15:16: style:inconclusive: Function 'Game' argument 1 names different: declaration 'x' definition 'width'. [funcArgNamesDifferent]
Game::Game(int width, int height):
               ^
Game.h:57:14: note: Function 'Game' argument 1 names different: declaration 'x' definition 'width'.
    Game(int x, int y);
             ^
Game.cpp:15:16: note: Function 'Game' argument 1 names different: declaration 'x' definition 'width'.
Game::Game(int width, int height):
               ^
Game.cpp:15:27: style:inconclusive: Function 'Game' argument 2 names different: declaration 'y' definition 'height'. [funcArgNamesDifferent]
Game::Game(int width, int height):
                          ^
Game.h:57:21: note: Function 'Game' argument 2 names different: declaration 'y' definition 'height'.
    Game(int x, int y);
                    ^
Game.cpp:15:27: note: Function 'Game' argument 2 names different: declaration 'y' definition 'height'.
Game::Game(int width, int height):
                          ^
Board.cpp:81:14: style:inconclusive: Boolean expression 'ox>=0' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    if(ox>=0 & ox<width_ & oy >= 0 & oy <height_ & dx>=0 & dx <width_ & dy >=0 & dy < height_){
             ^
Board.cpp:81:26: style:inconclusive: Boolean expression 'oy>=0' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    if(ox>=0 & ox<width_ & oy >= 0 & oy <height_ & dx>=0 & dx <width_ & dy >=0 & dy < height_){
                         ^
Board.cpp:81:36: style:inconclusive: Boolean expression 'oy<height_' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    if(ox>=0 & ox<width_ & oy >= 0 & oy <height_ & dx>=0 & dx <width_ & dy >=0 & dy < height_){
                                   ^
Board.cpp:81:50: style:inconclusive: Boolean expression 'dx>=0' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    if(ox>=0 & ox<width_ & oy >= 0 & oy <height_ & dx>=0 & dx <width_ & dy >=0 & dy < height_){
                                                 ^
Board.cpp:81:58: style:inconclusive: Boolean expression 'dx<width_' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    if(ox>=0 & ox<width_ & oy >= 0 & oy <height_ & dx>=0 & dx <width_ & dy >=0 & dy < height_){
                                                         ^
Board.cpp:81:71: style:inconclusive: Boolean expression 'dy>=0' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    if(ox>=0 & ox<width_ & oy >= 0 & oy <height_ & dx>=0 & dx <width_ & dy >=0 & dy < height_){
                                                                      ^
Board.cpp:81:80: style:inconclusive: Boolean expression 'dy<height_' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    if(ox>=0 & ox<width_ & oy >= 0 & oy <height_ & dx>=0 & dx <width_ & dy >=0 & dy < height_){
                                                                               ^
Board.cpp:82:22: style:inconclusive: Boolean expression 'dx==ox-1' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
        if((dx==ox-1 & dy ==oy) || (dx==ox & dy==oy+1) || (dx==ox+1 & dy==oy) || (dx==ox & dy==oy-1)){
                     ^
Board.cpp:82:44: style:inconclusive: Boolean expression 'dx==ox' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
        if((dx==ox-1 & dy ==oy) || (dx==ox & dy==oy+1) || (dx==ox+1 & dy==oy) || (dx==ox & dy==oy-1)){
                                           ^
Board.cpp:82:69: style:inconclusive: Boolean expression 'dx==ox+1' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
        if((dx==ox-1 & dy ==oy) || (dx==ox & dy==oy+1) || (dx==ox+1 & dy==oy) || (dx==ox & dy==oy-1)){
                                                                    ^
Board.cpp:125:14: style:inconclusive: Boolean expression 'ox<dx' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    if(ox<dx & oy < dy){
             ^
Board.cpp:129:14: style:inconclusive: Boolean expression 'ox<dx' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    if(ox<dx & oy>dy){
             ^
Board.cpp:133:14: style:inconclusive: Boolean expression 'ox>dx' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    if(ox>dx & oy>dy){
             ^
Board.cpp:137:14: style:inconclusive: Boolean expression 'ox>dx' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    if(ox>dx & oy<dy){
             ^
Board.cpp:151:31: style:inconclusive: Boolean expression 'directionWidth>=0' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    while(directionWidth >= 0 & directionWidth < width_ & directionHeight >= 0 & directionHeight < height_
                              ^
Board.cpp:151:57: style:inconclusive: Boolean expression 'directionHeight>=0' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    while(directionWidth >= 0 & directionWidth < width_ & directionHeight >= 0 & directionHeight < height_
                                                        ^
Board.cpp:151:80: style:inconclusive: Boolean expression 'directionHeight<height_' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
    while(directionWidth >= 0 & directionWidth < width_ & directionHeight >= 0 & directionHeight < height_
                                                                               ^
Board.cpp:152:13: style:inconclusive: Boolean expression 'board_[directionWidth][directionHeight].getColor()!=color' is used in bitwise operation. Did you mean '&&'? [bitwiseOnBoolean]
            & board_[directionWidth][directionHeight].getColor()!=color){
            ^
Board.h:58:11: style:inconclusive: Technically the member function 'BoardSpace::Board::getPiece' can be const. [functionConst]
    Piece getPiece(int x, int y);
          ^
Board.cpp:16:14: note: Technically the member function 'BoardSpace::Board::getPiece' can be const.
Piece Board::getPiece(int x, int y){
             ^
Board.h:58:11: note: Technically the member function 'BoardSpace::Board::getPiece' can be const.
    Piece getPiece(int x, int y);
          ^
Board.h:87:9: style:inconclusive: Technically the member function 'BoardSpace::Board::getWidth' can be const. [functionConst]
    int getWidth();
        ^
Board.cpp:59:12: note: Technically the member function 'BoardSpace::Board::getWidth' can be const.
int Board::getWidth(){
           ^
Board.h:87:9: note: Technically the member function 'BoardSpace::Board::getWidth' can be const.
    int getWidth();
        ^
Board.h:93:9: style:inconclusive: Technically the member function 'BoardSpace::Board::getHeight' can be const. [functionConst]
    int getHeight();
        ^
Board.cpp:63:12: note: Technically the member function 'BoardSpace::Board::getHeight' can be const.
int Board::getHeight(){
           ^
Board.h:93:9: note: Technically the member function 'BoardSpace::Board::getHeight' can be const.
    int getHeight();
        ^
Board.h:105:10: style:inconclusive: Technically the member function 'BoardSpace::Board::checkMove' can be const. [functionConst]
    bool checkMove(int ox,int oy, int dx, int dy);
         ^
Board.cpp:79:13: note: Technically the member function 'BoardSpace::Board::checkMove' can be const.
bool Board::checkMove(int ox, int oy, int dx, int dy){
            ^
Board.h:105:10: note: Technically the member function 'BoardSpace::Board::checkMove' can be const.
    bool checkMove(int ox,int oy, int dx, int dy);
         ^
Board.cpp:81:14: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
    if(ox>=0 & ox<width_ & oy >= 0 & oy <height_ & dx>=0 & dx <width_ & dy >=0 & dy < height_){
             ^
Board.cpp:82:22: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
        if((dx==ox-1 & dy ==oy) || (dx==ox & dy==oy+1) || (dx==ox+1 & dy==oy) || (dx==ox & dy==oy-1)){
                     ^
Board.cpp:125:14: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
    if(ox<dx & oy < dy){
             ^
Board.cpp:129:14: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
    if(ox<dx & oy>dy){
             ^
Board.cpp:133:14: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
    if(ox>dx & oy>dy){
             ^
Board.cpp:137:14: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
    if(ox>dx & oy<dy){
             ^
Board.cpp:151:31: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
    while(directionWidth >= 0 & directionWidth < width_ & directionHeight >= 0 & directionHeight < height_
                              ^
Board.cpp:152:13: style: Boolean result is used in bitwise operation. Clarify expression with parentheses. [clarifyCondition]
            & board_[directionWidth][directionHeight].getColor()!=color){
            ^
Board.cpp:67:56: style:inconclusive: Function 'move' argument 5 names different: declaration 'color' definition 'currentColor'. [funcArgNamesDifferent]
void Board::move(int ox, int oy, int dx, int dy, Color currentColor){
                                                       ^
Board.h:117:53: note: Function 'move' argument 5 names different: declaration 'color' definition 'currentColor'.
    void move(int ox, int oy, int dx, int dy, Color color);
                                                    ^
Board.cpp:67:56: note: Function 'move' argument 5 names different: declaration 'color' definition 'currentColor'.
void Board::move(int ox, int oy, int dx, int dy, Color currentColor){
                                                       ^
Board.cpp:156:12: warning: Either the condition 'directionWidth>=0' is redundant, otherwise there is negative array index -1. [negativeContainerIndex]
    return board_[directionWidth][directionHeight];
           ^
Board.cpp:151:26: note: Assuming that condition 'directionWidth>=0' is not redundant
    while(directionWidth >= 0 & directionWidth < width_ & directionHeight >= 0 & directionHeight < height_
                         ^
Board.cpp:156:12: note: Negative array index
    return board_[directionWidth][directionHeight];
           ^
Piece.h:42:10: style:inconclusive: Technically the member function 'PieceSpace::Piece::isInside' can be const. [functionConst]
    bool isInside();
         ^
Piece.cpp:16:13: note: Technically the member function 'PieceSpace::Piece::isInside' can be const.
bool Piece::isInside(){
            ^
Piece.h:42:10: note: Technically the member function 'PieceSpace::Piece::isInside' can be const.
    bool isInside();
         ^
Piece.h:56:11: style:inconclusive: Technically the member function 'PieceSpace::Piece::getColor' can be const. [functionConst]
    Color getColor();
          ^
Piece.cpp:31:14: note: Technically the member function 'PieceSpace::Piece::getColor' can be const.
Color Piece::getColor(){
             ^
Piece.h:56:11: note: Technically the member function 'PieceSpace::Piece::getColor' can be const.
    Color getColor();
          ^
Piece.h:63:10: style:inconclusive: Technically the member function 'PieceSpace::Piece::getBool' can be const. [functionConst]
    bool getBool();
         ^
Piece.cpp:35:13: note: Technically the member function 'PieceSpace::Piece::getBool' can be const.
bool Piece::getBool(){
            ^
Piece.h:63:10: note: Technically the member function 'PieceSpace::Piece::getBool' can be const.
    bool getBool();
         ^
Players.h:44:12: style:inconclusive: Technically the member function 'PlayersSpace::Players::getName' can be const. [functionConst]
    string getName();
           ^
Players.cpp:16:17: note: Technically the member function 'PlayersSpace::Players::getName' can be const.
string Players::getName(){
                ^
Players.h:44:12: note: Technically the member function 'PlayersSpace::Players::getName' can be const.
    string getName();
           ^
Players.h:57:9: performance:inconclusive: Technically the member function 'PlayersSpace::Players::play' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    int play(istream & c);
        ^
Players.cpp:26:14: note: Technically the member function 'PlayersSpace::Players::play' can be static (but you may consider moving to unnamed namespace).
int Players::play(istream & c){
             ^
Players.h:57:9: note: Technically the member function 'PlayersSpace::Players::play' can be static (but you may consider moving to unnamed namespace).
    int play(istream & c);
        ^
Players.h:64:11: style:inconclusive: Technically the member function 'PlayersSpace::Players::getColor' can be const. [functionConst]
    Color getColor();
          ^
Players.cpp:32:16: note: Technically the member function 'PlayersSpace::Players::getColor' can be const.
Color Players::getColor(){
               ^
Players.h:64:11: note: Technically the member function 'PlayersSpace::Players::getColor' can be const.
    Color getColor();
          ^
Players.cpp:11:25: performance: Function parameter 'name' should be passed by const reference. [passedByValue]
Players::Players(string name,Color color):
                        ^
View.h:67:10: performance:inconclusive: Technically the member function 'ViewSpace::View::showCommand' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void showCommand();
         ^
View.cpp:42:12: note: Technically the member function 'ViewSpace::View::showCommand' can be static (but you may consider moving to unnamed namespace).
void View::showCommand(){
           ^
View.h:67:10: note: Technically the member function 'ViewSpace::View::showCommand' can be static (but you may consider moving to unnamed namespace).
    void showCommand();
         ^
View.h:75:10: performance:inconclusive: Technically the member function 'ViewSpace::View::checkAction' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    bool checkAction(string action);
         ^
View.cpp:85:12: note: Technically the member function 'ViewSpace::View::checkAction' can be static (but you may consider moving to unnamed namespace).
bool View::checkAction(string action){
           ^
View.h:75:10: note: Technically the member function 'ViewSpace::View::checkAction' can be static (but you may consider moving to unnamed namespace).
    bool checkAction(string action);
         ^
View.h:39:5: style: Class 'View' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    View(Game & game);
    ^
View.cpp:89:30: performance: Function parameter 'action' should be passed by const reference. [passedByValue]
void View::playAction(string action,int & countMove,int & countPasse){
                             ^
